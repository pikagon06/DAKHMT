import streamlit as st
import numpy as np
import joblib

# Load m√¥ h√¨nh v√† scaler
model = joblib.load("Model/knn_model.pkl")
scaler = joblib.load("Model/scaler.pkl")

st.title("ü©∫ D·ª± ƒëo√°n Ung th∆∞ Ph·ªïi v·ªõi KNN")

# Giao di·ªán ng∆∞·ªùi d√πng
st.sidebar.header("Th√¥ng tin b·ªánh nh√¢n")

# Danh s√°ch c√°c bi·∫øn C√≥/Kh√¥ng
yesno_fields = [
    "SMOKING", "YELLOW_FINGERS", "ANXIETY", "PEER_PRESSURE", "CHRONIC DISEASE",
    "FATIGUE", "ALLERGY", "WHEEZING", "ALCOHOL CONSUMING", "COUGHING",
    "SHORTNESS OF BREATH", "SWALLOWING DIFFICULTY", "CHEST PAIN"
]

# Nh·∫≠p chu·ªói d√°n ƒë·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t c√°c l·ª±a ch·ªçn
bulk_input = st.sidebar.text_input(
    "D√°n chu·ªói s·ªë (1 l√† Kh√¥ng, 2 l√† C√≥):",
    placeholder="1 2 1 1 2 1 2 2 1 1 2 2 1"
)

# X·ª≠ l√Ω chu·ªói ƒë·∫ßu v√†o
default_values = ["Kh√¥ng"] * len(yesno_fields)
if bulk_input:
    try:
        values = list(map(int, bulk_input.strip().split()))
        default_values = ["C√≥" if v == 2 else "Kh√¥ng" for v in values]
    except:
        st.sidebar.error("‚ö†Ô∏è Chu·ªói kh√¥ng h·ª£p l·ªá! ƒê·∫£m b·∫£o ch·ªâ c√≥ s·ªë 1 ho·∫∑c 2.")

def user_input():
    gender = st.sidebar.selectbox("Gi·ªõi t√≠nh", ("Nam", "N·ªØ"))
    age = st.sidebar.number_input("Tu·ªïi", min_value=10, max_value=100, value=30)

    # H√†m ch·ªçn C√≥/Kh√¥ng t·ª´ default
    def get_option(label, idx):
        return st.sidebar.selectbox(label, ("Kh√¥ng", "C√≥"), index=(1 if default_values[idx] == "C√≥" else 0))

    # L·∫•y c√°c l·ª±a ch·ªçn
    smoking = get_option("H√∫t thu·ªëc", 0)
    yellow_fingers = get_option("Ng√≥n tay v√†ng", 1)
    anxiety = get_option("Lo √¢u", 2)
    peer_pressure = get_option("√Åp l·ª±c t·ª´ b·∫°n b√®", 3)
    chronic_disease = get_option("B·ªánh m√£n t√≠nh", 4)
    fatigue = get_option("M·ªát m·ªèi", 5)
    allergy = get_option("D·ªã ·ª©ng", 6)
    wheezing = get_option("Th·ªü kh√≤ kh√®", 7)
    alcohol = get_option("U·ªëng r∆∞·ª£u", 8)
    coughing = get_option("Ho", 9)
    breath = get_option("Kh√≥ th·ªü", 10)
    swallow = get_option("Kh√≥ nu·ªët", 11)
    chest_pain = get_option("ƒêau ng·ª±c", 12)

    # Chuy·ªÉn v·ªÅ d·∫°ng s·ªë cho model
    gender = 1 if gender == "Nam" else 0
    yesno = lambda x: 1 if x == "Kh√¥ng" else 2  # 1: Kh√¥ng, 2: C√≥
    features = [
        age, gender, yesno(smoking), yesno(chest_pain), yesno(breath), yesno(coughing), yesno(peer_pressure),
        yesno(chronic_disease), yesno(swallow), yesno(yellow_fingers), yesno(anxiety), yesno(fatigue),
        yesno(allergy), yesno(wheezing), yesno(alcohol)
    ]
    return np.array(features).reshape(1, -1)

# L·∫•y d·ªØ li·ªáu ƒë·∫ßu v√†o
input_data = user_input()

# N√∫t d·ª± ƒëo√°n
if st.button("üß† D·ª± ƒëo√°n"):
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)
    if prediction[0] == 1:
        st.error("‚ö†Ô∏è C·∫£nh b√°o: B·ªánh nh√¢n c√≥ nguy c∆° M·∫ÆC UNG TH∆Ø PH·ªîI.")
        st.image("https://i.imgur.com/U3vTGjX.png", caption="C√πng chia s·∫ª v√† h·ªó tr·ª£ b·ªánh nh√¢n üôè", use_container_width=True)
    else:
        st.success("‚úÖ B·ªánh nh√¢n KH√îNG c√≥ nguy c∆° ung th∆∞ ph·ªïi.")
        st.balloons()
        st.markdown("üéâ **Ch√∫c m·ª´ng! Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh nh√©.**")
